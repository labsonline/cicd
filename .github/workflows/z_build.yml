name: Build

on:
  workflow_call:
    inputs:
      name:
        type: string
        description: Name of the project
        required: true
      go:
        type: boolean
        description: Whether to build Go binaries
        default: false
      docker:
        type: boolean
        description: Whether to build Docker image
        default: false
      helm:
        type: boolean
        description: Whether to build Helm chart
        default: false

env:
  REGISTRY: docker.io

jobs:
  # Go binaries
  go:
    runs-on: ubuntu-latest
    if: ${{ inputs.go }}
    strategy:
      matrix:
        os:
          - linux
          - darwin
          - windows
        arch:
          - arm64
          - amd64
        include:
          - arch: riscv64
            os: linux
    env:
      CGO_ENABLED: 0
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Install dependencies
        run: |
          sudo apt update -y
          sudo apt install -y protobuf-compiler

          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
      - name: Build
        id: go-build
        run: |
          if [ "${GOOS}" = windows ]; then
            NAME="${{ inputs.name }}-${GOOS}-${GOARCH}.exe"
          else
            NAME="${{ inputs.name }}-${GOOS}-${GOARCH}"
          fi

          go build -o "${NAME}" -v ./cmd/server
          echo "{name}=${NAME}" >> "${GITHUB_OUTPUT}"
      # FIXME: vulnerability scanning
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: rootfs
      #     scan-ref: ${{ steps.go-build.outputs.name }}
      #     format: sarif
      #     output: trivy-results.bin.sarif
      #     exit-code: 1
      #     ignore-unfixed: true
      #     hide-progress: false
      #     severity: HIGH,CRITICAL
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: trivy-results.bin.sarif
      - name: Upload binaries
        uses: actions/upload-artifact@v2
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/tags/main' }}
        with:
          name: ${{ inputs.name }}-${{ env.GOOS }}-${{ env.GOARCH }}
          path: /tmp/${{ inputs.name }}-${{ env.GOOS }}-${{  env.GOARCH }}

  # Docker image
  docker:
    runs-on: ubuntu-latest
    if: ${{ inputs.docker }}
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
      - name: Log into container registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/tags/main' }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_PATH }}/${{ inputs.name }}
          tags: |
            type=semver,pattern={{version}}
            type=sha,format=short
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        env:
          PLATFORMS: linux/amd64,linux/arm64
          BUILD_IMAGE: docker.io/golang:1.20.4-alpine3.18
          BASE_IMAGE: docker.io/alpine:3.18.0
        with:
          file: build/package/Dockerfile
          # outputs: type=docker,dest=/tmp/${{ inputs.name }}.tar
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/tags/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ env.PLATFORMS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_IMAGE=${{ env.BUILD_IMAGE }}
            BASE_IMAGE=${{ env.BASE_IMAGE }}
      # FIXME: vulnerability scanning
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ steps.meta.outputs.tags }}
      #     format: sarif
      #     output: trivy-results.docker.sarif
      #     exit-code: 1
      #     ignore-unfixed: true
      #     hide-progress: false
      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: trivy-results.docker.sarif

  # Helm chart
  helm:
    runs-on: ubuntu-latest
    if: ${{ inputs.helm }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: deployment/chart
          format: sarif
          output: trivy-results.helm.sarif
          exit-code: 1
          ignore-unfixed: true
          hide-progress: false
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.helm.sarif
      - name: Package Helm chart
        run: helm package deployment/chart
      - name: Log into chart registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/tags/main' }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Push Helm chart
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/tags/main' }}
        run: helm push ${{ inputs.name }}-*.tgz oci://${{ env.REGISTRY }}/${{ secrets.REGISTRY_PATH }}
